version: 2.1
orbs:
  python: circleci/python@1.2.0
  aws-ecr: circleci/aws-ecr@6.12.2

defaults: &defaults
  parameters:
    profile:
      type: enum
      enum: ["dev", "tst", "stg", "prd"]
      default: "dev"
    tag:
      type: string
      default: ${CIRCLE_SHA1}
  docker:
    - image: cimg/openjdk:11.0.8

commands:
  deploy-to-ecr:
    parameters:
      tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - aws-ecr/build-and-push-image:
          repo: notification-$MICROSERVICE
          setup-remote-docker: true
          attach-workspace: true
          tag: << parameters.tag >>
          path: docker
          dockerfile: Dockerfile
          checkout: false
  update-ecs:
    parameters:
      profile:
        type: enum
        enum: ["dev", "tst", "stg", "prd"]
        default: "dev"
      tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - run:
          name: Update service
          command: |
            curl -X POST --header "Content-Type: application/json" -d "{\"build_parameters\": {\"CIRCLE_JOB\": \"deploy\", \"DEPLOY_ENVIRONMENT\": \"<< parameters.profile >>\", \"DEPLOY_VERSIONS\": \"${MICROSERVICE}_int:<< parameters.tag >>\"}}" https://circleci.com/api/v1.1/project/github/PostiDigital/notification-cloud-infra/tree/master?circle-token=$CIRCLE_CI_API_TOKEN
  trigger-e2e:
    parameters:
      profile:
        type: enum
        enum: ["dev", "tst", "stg", "prd"]
        default: "dev"
    steps:
      - run: sleep 400
      - run:
          name: Trigger e2e
          command: |
            curl -X POST --header "Content-Type: application/json" -d "{\"build_parameters\": {\"PROJECT\": \"${CIRCLE_PROJECT_REPONAME}\", \"E2E_ENVIRONMENT\": \"<< parameters.profile >>\", \"COMMIT_ID\": \"${CIRCLE_SHA1}\", \"BRANCH\": \"${CIRCLE_BRANCH}\", \"BUILD_URL\": \"${CIRCLE_BUILD_URL}\"}}" https://circleci.com/api/v1.1/project/github/PostiDigital/notification-tool-e2e/tree/${CIRCLE_BRANCH}?circle-token=$CIRCLE_CI_API_TOKEN

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: checkstyle, compile, test, build
          command: ./gradlew clean build
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - deploy-to-ecr:
          tag: << parameters.tag >>
      - update-ecs:
          tag: << parameters.tag >>
          profile: << parameters.profile >>
  e2e:
    <<: *defaults
    steps:
      - trigger-e2e:
          profile: << parameters.profile >>
  update-service-with-latest:
    <<: *defaults
    steps:
      - update-ecs:
          tag: << parameters.tag >>
          profile: << parameters.profile >>
workflows:
  version: 2

  development-build-and-deploy:
    jobs:
      - build:
          profile: dev
          context: ntf
          filters:
            branches:
              only:
                - develop
      - e2e:
          profile: dev
          context: ntf
          filters:
            branches:
              only:
                - develop

  test-build-and-deploy:
    jobs:
      - build:
          context: ntf
          profile: tst
          filters:
            branches:
              only:
                - test

  staging-deploy:
    jobs:
      - build:
          context: ntf
          profile: stg
          filters:
            branches:
              only:
                - master

  production-deploy:
    jobs:
      - update-service-with-latest:
          context: ntf
          profile: prd
          filters:
            tags:
              only: /^v\d\.\d\.\d$/
            branches:
              ignore: /.*/
          requires:
            - deploy-to-prod?
      - deploy-to-prod?:
          type: approval
          context: ntf
          filters:
            tags:
              only: /^v\d\.\d\.\d$/
            branches:
              ignore: /.*/
